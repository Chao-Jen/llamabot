---
author: ericmjl.github.io/llamabot
title: "ü¶ô LlamaBot: A Pythonic Interface to LLMs"
format:
  revealjs:
    slide-number: c/t
  # html:
  #   toc: true
jupyter: llamabot
execute:
  echo: true
  eval: false
  cache: true
footer: Made with ‚ù§Ô∏è by Eric J. Ma using Quarto
---

## üíÅüèª‚Äç‚ôÇÔ∏è About me

-   Website: [https://ericmjl.github.io/](https://ericmjl.github.io/)
-   LlamaBot: [https://ericmjl.github.io/llamabot](https://ericmjl.github.io/llamabot)

## ü¶ô Why LlamaBot exists

LlamaBot has dual purposes:

-   Pedagogical: learn about LLMs by building tooling around LLMs
-   Pythonic: make LLMs Pythonic around a "bot"-based paradigm.

## Bot?

A bot is a front-end to an LLM, such that the LLM responds to what you input.

## SimpleBot

The original paradigm.

:::::: {.panel-tabset .incremental}
## OpenAI

```{python}
#| label: "import-and-response"
#| eval: false
#| cache: true
#| code-line-numbers: "1|3-5|6-8"

from llamabot import SimpleBot

bot = SimpleBot(
  "You are Richard Feynman"
)
response = bot(
  "Tell me about the evidence for black holes in under 100 words."
)
```

::: callout-note
OpenAI API key required by default!
:::

## Ollama

```{python}
#| eval: false
#| label: run-with-ollama
#| code-line-numbers: "3,"

bot = SimpleBot(
    "You are Richard Feynman",
    model_name="ollama/mistral",
)
response = bot(
    "Tell me about the evidence for black holes in under 100 words."
)
```

::: callout-note
Needs [Ollama](https://ollama.com/) running locally!
:::

## Anthropic

```{python}
#| eval: false
#| label: run-with-anthropic
#| code-line-numbers: "3,"

bot = SimpleBot(
    "You are Richard Feynman",
    model_name="anthropic/claude-3.5",
)
response = bot(
    "Tell me about the evidence for black holes in under 100 words."
)
```

::: callout-note
Needs Anthropic API key!
:::

## Others

[LiteLLM](https://github.com/BerriAI/litellm) is our model switchboard underneath the hood.

Any model supported by LiteLLM is supported by LlamaBot.
:::

## ChatBot

Comes with memory of previous messages sent and received.

```{python}
#| echo: true
#| eval: false
from llamabot import ChatBot

bot = ChatBot("You are Richard Feynman.")
response1 = bot(
    "Tell me about the evidence for black holes in under 100 words."
)
response2 = bot(
    "What about cells as the unit of life?"
)
```

## QueryBot (for RAG)

Enables us to quickly set up retrieval-augmented generation on documents.

```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "4,7-8,10"
from llamabot import QueryBot
from pyprojroot import here

bot = QueryBot(
    """You are Richard Feynman who answers questions
    based on provided documents.""",
    collection_name="llamabot-readme",
    document_paths=(here() / "docs").rglob("*.md")
)
bot("How do I use SimpleBot with Ollama?")
```

Highly inspired by [EmbedChain](https://github.com/embedchain/embedchain),
but without the LangChain dependency.

## Prompt Decorator

Original idea came from [Outlines](https://github.com/outlines-dev/outlines). Check them out!

```{python}
#| eval: false
#| code-line-numbers: "1|3-5|8-17"
from llamabot.prompt_manager import prompt

@prompt
def structured_sysprompt() -> str:
    """You are a bot that returns structured JSON."""


@prompt
def structured_chatprompt(query: str, json_schema: str) -> str:
    """Given the following query:

    {{ query }}

    Return JSON that follows the following JSON schema:

    {{ json_schema }}
    """
```

`jinja2` templating enables safe interpolation into strings.

## ImageBot

Only works with DALL-E for now, but lets us generate images:

```{python}
from llamabot import ImageBot

bannerbot = ImageBot(size="1792x1024")
response = bannerbot(bannerbot_sysprompt() + "blog_contents_go_here")
```

::: callout-note
OpenAI API key required!
:::

## Example Images

::: {.panel-tabset}
## Example 1

![](https://ericmjl.github.io/blog/2024/7/2/use-native-formats-when-storing-data/logo.webp)

## Example 2

![](https://ericmjl.github.io/blog/2024/6/30/two-years-of-docathons-insights-and-lessons-learned/logo.webp)

## Example 3

![](https://ericmjl.github.io/blog/2024/6/26/hire-for-communication-skills-not-conversational-skills/logo.webp)
:::

---

[Let's build some tools!]{style="font-size:160px"}

---

## Git


## DocChat

Similar to embedchain, I can chat with:

-   Zotero library
-   Repository source files

...at the terminal

## Blogging

I can use LLMs to quickly bootstrap mentally tedious tasks when blogging:

-   Post tags
-   Summaries
-   Banner images

## Social Media

I can use LLMs to help me to write things I'm bad at writing

-   Twitter posts
-   LinkedIn posts
-   Substack summaries



## ‚≠êÔ∏è Thank You
